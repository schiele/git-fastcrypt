#!/usr/bin/env python3
#
#  git-incrypt: A git remote helper to encrypt git repositories incrementally
#  Copyright (C) 2025  Robert Schiele <rschiele@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# pylint: disable=invalid-name
'''
Encrypt git branches
'''

import subprocess
import os
import sys
import re
import hashlib
import base64
import argparse
import pygit2
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend

FORMAT = b'\x00\x00\x00\x00'


def cipher(key):
    'return cipher to be used'
    return Cipher(algorithms.AES(key[0:32]), modes.CBC(key[32:48]),
                  backend=default_backend())


def pad():
    'return patting to be used'
    return padding.PKCS7(algorithms.AES.block_size)


def encryptdata(data: bytes, key: bytes) -> (bytes, bytes):
    'encrypt raw data'
    e = cipher(key).encryptor()
    p = pad().padder()
    return e.update(p.update(data) + p.finalize()) + e.finalize()


def decryptdata(ciphertext: bytes, key: bytes) -> bytes:
    'decrypt raw data'
    d = cipher(key).decryptor()
    u = pad().unpadder()
    return u.update(d.update(ciphertext) + d.finalize()) + u.finalize()


def secretcommit(tree, parents, repo, key):
    'create secret commit wrapper'
    data = key[48:].decode('utf-8').split('\x00', 5)
    who = pygit2.repository.Signature(data[0], data[1],
                                      time=int(data[2]), offset=int(data[3]))
    return str(repo.create_commit(None, who, who,
                                  data[4], tree, parents))


def encryptrefname(ref, key):
    'encrypt a refname'
    def splitref(s):
        'split the ref from the suffix'
        match = re.search(r'[~^]', s)
        if match:
            index = match.start()
            return s[:index], s[index:]
        return s, ''

    sref = splitref(ref)
    rawname = sref[0].encode('utf-8')
    return 'refs/heads/' + base64.b64encode(encryptdata(
            hashlib.sha1(rawname).digest() + rawname, key),
                                            b'+#').decode('utf-8') + sref[1]


def decryptrefname(ref, key):
    'decrypt a refname'
    try:
        data = decryptdata(base64.b64decode(
            ref.rsplit('/', 1)[-1], b'+#'), key)
        assert hashlib.sha1(data[20:]).digest() == data[0:20], \
            'corrupted reference name'
        return data[20:].decode('utf-8')
    except ValueError:
        return None


def getkey(repo):
    'retrieve an existing key'
    cryptedkey = repo.revparse_single('refs/heads/key').tree["0"].read_raw()
    assert cryptedkey[0:4] == FORMAT, \
        f'Crypt format is {cryptedkey[0:4]}, expected {FORMAT}'
    return subprocess.check_output(['gpg', '-q', '-d'], input=cryptedkey[4:])


class CryptRepo:
    # pylint: disable=too-many-instance-attributes
    'encrypted repository'
    verbosityflags = ('-q', '-q', '-v', '-vv', '-vvv')

    def __init__(self, clearname, remotename, url):
        assert clearname, 'This does not work yet outside a git repository'
        self.verbosity = 1
        self.showprogress = True
        self.remotename = remotename
        self.clearrepo = pygit2.Repository(clearname)
        hashstr = hashlib.sha1(url.encode('utf-8')).hexdigest()
        self.name = os.path.join(clearname, 'incrypt', hashstr)
        self.refprefix = f'refs/incrypt/{hashstr}/'
        if not os.path.isdir(self.name):
            subprocess.run(['git', 'clone',
                            CryptRepo.verbosityflags[self.verbosity],
                            '-o', 'incrypt', '--mirror', url, self.name],
                           check=True, stdout=sys.stderr)
            subprocess.run(['git', 'config', 'unset', 'remote.incrypt.mirror'],
                           cwd=self.name, check=True, stdout=sys.stderr)
        self.repo = pygit2.Repository(self.name)
        self.key = getkey(self.repo)

    def progressbar(self, what, progress, total):
        'print a progress bar'
        if not self.showprogress:
            return
        if not what:
            sys.stderr.write(', done.\n')
            sys.stderr.flush()
            return
        percent = progress / total
        sys.stderr.write(
            f'\r{self.remotename}: {what}: {percent:.0%} ({progress}/{total})')
        sys.stderr.flush()

    def readmap(self, reverse=False):
        'read the mapping table'
        o = 20 if reverse else 0
        processed = {}
        try:
            rawdata = decryptdata(self.repo.revparse_single(
                'refs/heads/map').tree["0"].read_raw(), self.key)
            for i in range(20, len(rawdata), 40):
                target = rawdata[i+20-o:i+40-o].hex()
                if target in self.clearrepo if reverse else self.repo:
                    processed[rawdata[i+o:i+20+o].hex()] = target
        except KeyError:
            pass
        return processed

    def getrefs(self):
        'list all cleartext references'
        def recursivefinddec():
            'recursively traverse and find all commits to decrypt'
            while status[0]:
                oid, obj = status[0].popitem()
                for p in obj.parents:
                    if p.id not in status[1]:
                        status[0][p.id] = p
                status[1][oid] = obj

        def randomdecryption():
            'encrypt all objects in topological order'
            def decrypttree(tree):
                'decrypt a tree representing a commit or tag'
                commit = None
                for obj in tree:
                    raw = decryptdata(obj.read_raw(), self.key)
                    tmp = self.clearrepo.odb.write(raw[20], raw[21:])
                    if raw[20] in (pygit2.enums.ObjectType.COMMIT,
                                   pygit2.enums.ObjectType.TAG):
                        commit = tmp
                return commit

            total = len(status[1])
            while status[1]:
                oid, obj = status[1].popitem()
                status[2][oid] = status[3][oid] \
                    if oid in status[3] and status[3][oid] in self.clearrepo \
                    else decrypttree(obj.tree)
                self.progressbar('Decrypting objects', len(status[2]), total)
            self.progressbar(None, 0, 0)

        subprocess.run(['git', 'fetch',
                        CryptRepo.verbosityflags[self.verbosity]],
                       cwd=self.name, check=True, stdout=sys.stderr)
        # [ dec(crypt) , prefdec(crypt), crypt ]
        refs = [[r[0], self.refprefix + r[0], self.repo.revparse_single(r[1])]
                for r in [[decryptrefname(r, self.key), r] for r in
                          filter(lambda r: len(r) > 14, self.repo.references)]]
        # [ found, ready, processed, cryptmap ]
        status = [{}, {}, {}, self.readmap(reverse=True)]
        for r in refs:
            status[0][r[2].id] = r[2]
        recursivefinddec()
        randomdecryption()
        for r in refs:
            self.clearrepo.create_reference(r[1], status[2][r[2].id],
                                            force=True)
        expected = [r[1] for r in refs]
        result = []
        for r in self.clearrepo.references:
            if r.startswith(self.refprefix):
                if r in expected:
                    result.append([r[len(self.refprefix):],
                                   self.clearrepo.lookup_reference(r).target])
                else:
                    self.clearrepo.references.delete(r)
        return result

    def push(self, refs):
        # pylint: disable=too-many-statements
        # pylint: disable=too-many-locals
        'push refs'
        def writemap():
            'write the mapping table'
            rawdata = b''
            for a, b in status[3].items():
                rawdata += bytes.fromhex(a) + bytes.fromhex(b)
            mapfile = self.repo.create_blob(encryptdata(
                hashlib.sha1(rawdata).digest() + rawdata, self.key))
            collector = self.repo.TreeBuilder()
            collector.insert('0', mapfile, pygit2.enums.FileMode.BLOB)
            colid = collector.write()
            commit = secretcommit(colid, [], self.repo, self.key)
            self.repo.create_reference('refs/heads/map', commit, force=True)

        def iscomplete(obj):
            'check if processing is complete'
            if obj.type == pygit2.enums.ObjectType.COMMIT:
                for p in obj.parents:
                    if p.id not in status[3]:
                        return False
                return True
            if obj.type == pygit2.enums.ObjectType.TAG:
                return obj.target in status[3]
            raise TypeError(
                f'Unexpected type {obj.type_str} in completeness check')

        def register(obj, child):
            'register new object'
            if obj.id not in children:
                children[obj.id] = []
            if child:
                children[obj.id].append(child)
            if all(obj.id not in d for d in status):
                status[0][obj.id] = obj

        def recursivefind():
            'recursively traverse and find all commits to encrypt'
            while status[0]:
                oid, obj = status[0].popitem()
                if obj.type == pygit2.enums.ObjectType.COMMIT:
                    for p in obj.parents:
                        register(p, obj)
                elif obj.type == pygit2.enums.ObjectType.TAG:
                    register(obj.get_object(), obj)
                else:
                    raise TypeError(
                        f'Unexpected type {obj.type_str} in git history')
                if iscomplete(obj):
                    status[2][oid] = obj
                else:
                    status[1][oid] = obj

        def topologicalencryption():
            'encrypt all objects in topological order'
            def cryptraw(clear, collector):
                'encrypt a raw object'
                cryptid = cryptcache[clear.id] if clear.id in cryptcache else \
                    self.repo.create_blob(encryptdata(
                        clear.id.raw + clear.type.to_bytes(1) +
                        clear.read_raw(), self.key))
                collector.insert(str(len(collector)), cryptid,
                                 pygit2.enums.FileMode.BLOB)
                cryptcache[clear.id] = cryptid

            def encryptcommit(commit):
                'encrypt a commit'
                def encrypttree(tree):
                    'encrypt a tree'
                    for obj in tree:
                        if selfcontained or obj.id not in cryptcache:
                            if obj.type == pygit2.enums.ObjectType.TREE:
                                encrypttree(obj)
                            elif obj.type == pygit2.enums.ObjectType.BLOB:
                                cryptraw(obj, collector)
                    cryptraw(tree, collector)

                selfcontained = True
                collector = self.repo.TreeBuilder()
                if selfcontained or commit.tree.id not in cryptcache:
                    encrypttree(commit.tree)
                cryptraw(commit, collector)
                colid = collector.write()
                cryptparents = [status[3][c] for c in commit.parent_ids]
                status[3][str(commit.id)] = secretcommit(
                        colid, cryptparents, self.repo, self.key)

            def encrypttag(tag):
                'encrypt a tag'
                collector = self.repo.TreeBuilder()
                cryptraw(tag, collector)
                colid = collector.write()
                status[3][str(tag.id)] = secretcommit(
                    colid, [status[3][tag.target]], self.repo, self.key)

            cryptcache = {}
            totals = [len(status[1]) + len(status[2]), len(status[3])]
            while status[2]:
                oid, obj = status[2].popitem()
                if obj.type == pygit2.enums.ObjectType.COMMIT:
                    encryptcommit(obj)
                elif obj.type == pygit2.enums.ObjectType.TAG:
                    encrypttag(obj)
                else:
                    raise TypeError(
                        f'Unexpected type {obj.type_str} in git history')
                for c in children[oid]:
                    if c.id not in status[1]:
                        continue
                    if iscomplete(c):
                        status[2][c.id] = status[1].pop(c.id)
                self.progressbar('Encrypting objects',
                                 len(status[3]) - totals[1], totals[0])
            self.progressbar(None, 0, 0)

        # [ found, pending, ready, processed ]
        status = [{}, {}, {}, self.readmap()]
        children = {}
        xrefs = [[r[0], r[1], r[3],
                  f'{'+' if r[2] else ''}{r[3] if r[0] else ''}:{r[3]}',
                  self.clearrepo.revparse_single(r[0]) if r[0] else None]
                 for r in [[r[0], r[1], r[2], encryptrefname(r[1], self.key)]
                           for r in refs]]
        for init in xrefs:
            if init[4]:
                register(init[4], None)
        recursivefind()
        topologicalencryption()
        assert len(status[1]) == 0, \
            f'Not all data got processed, {status[1]} still pending'
        writemap()
        for r in xrefs:
            if r[4]:
                self.repo.create_reference(r[2], status[3][r[4].id],
                                           force=True)
            else:
                try:
                    self.repo.references.delete(r[2])
                except KeyError:
                    pass
        result = subprocess.run(
            ['git', 'push'] +
            ([CryptRepo.verbosityflags[self.verbosity]] if self.verbosity > 1
             else []) +
            ['--porcelain', 'incrypt', '+refs/heads/map:refs/heads/map'] +
            [r[3] for r in xrefs],
            cwd=self.name, check=False, text=True, stdout=subprocess.PIPE)
        resdict = {}
        for line in result.stdout.split('\n'):
            e = line.split('\t', 2)
            if len(e) == 3:
                resdict[e[1].split(':', 1)[1]] = \
                    e[2].split('(', 1)[1][0:-1] if e[0] == '!' else None
        return {r[1]: resdict[r[2]] for r in xrefs}


def remotehelperloop():
    'communication loop'
    def fetchcommand(line):
        'parse fetch batch'
        while line:
            command = line.split()
            assert command[0] == 'fetch', \
                f'Unexpected command in fetch batch: {line}'
            line = sys.stdin.readline().strip()
        sys.stdout.write('\n')

    def pushcommand(line):
        'parse push batch'
        refs = []
        while line:
            command = line.split()
            assert command[0] == 'push', \
                f'Unexpected command in push batch: {line}'
            src, dst = command[1].split(':')
            force = len(src) and src[0] == '+'
            if force:
                src = src[1:]
            refs.append([src, dst, force])
            line = sys.stdin.readline().strip()
        results = crypt.push(refs)
        sys.stdout.write(f"{
            ''.join([(f'error {r} {e}\n' if e else f'ok {r}\n')
                     for r, e in results.items()])}\n")

    crypt = CryptRepo(os.environ.pop('GIT_DIR', None),
                      sys.argv[1], sys.argv[2])
    while True:
        sys.stdout.flush()
        line = sys.stdin.readline().strip()
        if not line:
            break
        command = line.split()
        if command[0] == 'capabilities':
            sys.stdout.write('fetch\npush\noption\n\n')
        elif command[0] == 'list':
            sys.stdout.write(f"{''.join([f'{r[1]} {r[0]}\n'
                                         for r in crypt.getrefs()])}\n")
        elif command[0] == 'fetch':
            fetchcommand(line)
        elif command[0] == 'push':
            pushcommand(line)
        elif command[0] == 'option':
            if command[1] == 'progress':
                crypt.showprogress = command[2] == 'true'
            elif command[1] == 'verbosity':
                crypt.verbosity = int(command[2])
            elif command[1] == 'followtags':
                pass
            else:
                sys.stdout.write('unsupported\n')
                continue
            sys.stdout.write('ok\n')
        else:
            raise RuntimeError(f'Unknown command: {line}')


def init_command(args):
    'init incrypt repository'
    repo = pygit2.init_repository('.', bare=True)
    key = os.urandom(48) + \
        args.name.encode('utf-8') + b'\x00' + \
        args.email.encode('utf-8') + b'\x00' + \
        str(args.time).encode('utf-8') + b'\x00' + \
        str(args.offset).encode('utf-8') + b'\x00' + \
        args.message.encode('utf-8')
    cryptedkey = subprocess.check_output([
        'gpg', '-q', '-e'] + ['-r' + k for k in args.keys], input=key)
    keyfile = repo.create_blob(FORMAT + cryptedkey)
    collector = repo.TreeBuilder()
    collector.insert('0', keyfile, pygit2.enums.FileMode.BLOB)
    colid = collector.write()
    commit = secretcommit(colid, [], repo, key)
    repo.create_reference('refs/heads/key', commit, force=True)
    return key


def tool():
    'git incrypt tool implementation'
    parser = argparse.ArgumentParser(
        description='git inccrypt: '
        'A git remote helper to encrypt git repositories incrementally.')
    subparsers = parser.add_subparsers(
        title='subcommands', dest='command', help='Available commands')
    subparsers.required = True
    init_parser = subparsers.add_parser(
        'init', help='Initialize the project')
    init_parser.add_argument(
        '-n', '--name', type=str, default='nobody',
        help='Name of the author of the encrypted commits')
    init_parser.add_argument(
        '-e', '--email', type=str, default='nobody@nowhere.org',
        help='Email of the author of the encrypted commits')
    init_parser.add_argument(
        '-t', '--time', type=int, default=0,
        help='Seconds since the epoch when the encypted commits are authored')
    init_parser.add_argument(
        '-o', '--offset', type=int, default=0, help='Offset to UTC in hours '
        'for the time when the encypted commits are authored')
    init_parser.add_argument(
        '-m', '--message', type=str, default='',
        help='Message in encrypted commits')
    init_parser.add_argument(
        'keys', nargs='+', help='GPG keys used to encrypt the data')
    init_parser.set_defaults(func=init_command)
    args = parser.parse_args()
    args.func(args)


cmd = sys.argv[0].rsplit('/', 1)[-1]

if cmd == 'git-remote-incrypt':
    remotehelperloop()
elif cmd == 'git-incrypt':
    tool()
