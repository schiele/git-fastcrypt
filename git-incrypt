#!/usr/bin/env python3
#
#  git-incrypt: A git remote helper to encrypt git repositories incrementally
#  Copyright (C) 2025  Robert Schiele <rschiele@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# pylint: disable=invalid-name
'''
Encrypt git branches
'''

import subprocess
import os
import sys
import re
import hashlib
import base64
import pygit2
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend

FORMAT = b'\x00\x00\x00\x00'


def cipher(key):
    'return cipher to be used'
    return Cipher(algorithms.AES(key[0:32]), modes.CBC(key[32:48]),
                  backend=default_backend())


def pad():
    'return patting to be used'
    return padding.PKCS7(algorithms.AES.block_size)


def encryptdata(data: bytes, key: bytes) -> (bytes, bytes):
    'encrypt raw data'
    e = cipher(key).encryptor()
    p = pad().padder()
    return e.update(p.update(data) + p.finalize()) + e.finalize()


def decryptdata(ciphertext: bytes, key: bytes) -> bytes:
    'decrypt raw data'
    d = cipher(key).decryptor()
    u = pad().unpadder()
    return u.update(d.update(ciphertext) + d.finalize()) + u.finalize()


def secretcommit(tree, parents, repo, key):
    'create secret commit wrapper'
    data = key[48:].decode('utf-8').split('\x00', 5)
    who = pygit2.repository.Signature(data[0], data[1],
                                      time=int(data[2]), offset=int(data[3]))
    return str(repo.create_commit(None, who, who,
                                  data[4], tree, parents))


def encryptrefname(ref, key):
    'encrypt a refname'
    def splitref(s):
        'split the ref from the suffix'
        match = re.search(r'[~^]', s)
        if match:
            index = match.start()
            return s[:index], s[index:]
        return s, ''


    sref = splitref(ref)
    rawname = sref[0].encode('utf-8')
    return 'refs/heads/' + base64.b64encode(encryptdata(
            hashlib.sha1(rawname).digest() + rawname, key),
                                            b'+#').decode('utf-8') + sref[1]


def decryptrefname(ref, key):
    'decrypt a refname'
    try:
        data = decryptdata(base64.b64decode(
            ref.rsplit('/', 1)[-1], b'+#'), key)
        assert hashlib.sha1(data[20:]).digest() == data[0:20], \
            'corrupted reference name'
        return data[20:].decode('utf-8')
    except ValueError:
        return None


def getkey(repo):
    'retrieve an existing key'
    cryptedkey = repo.revparse_single('refs/heads/key').tree["0"].read_raw()
    assert cryptedkey[0:4] == FORMAT, \
        f'Crypt format is {cryptedkey[0:4]}, expected {FORMAT}'
    return subprocess.check_output(['gpg', '-q', '-d'], input=cryptedkey[4:])


def listcryptrefs(reponame):
    'list all enctypted references'
    repo = pygit2.Repository(reponame)
    key = getkey(repo)
    for r in filter(lambda x: x is not None,
                    [decryptrefname(r, key) for r in repo.references]):
        print(f'{r} ({encryptrefname(r, key)})')


def initcrypt(reponame, keys, data=(
        'nobody', 'nobody@nowhere.org', 0, 0, 'secret')):
    'init crypto repository'
    repo = pygit2.init_repository(reponame, bare=True)
    key = os.urandom(48) + \
        data[0].encode('utf-8') + b'\x00' + \
        data[1].encode('utf-8') + b'\x00' + \
        str(data[2]).encode('utf-8') + b'\x00' + \
        str(data[3]).encode('utf-8') + b'\x00' + \
        data[4].encode('utf-8')
    cryptedkey = subprocess.check_output([
        'gpg', '-q', '-e'] + ['-r' + k for k in keys], input=key)
    keyfile = repo.create_blob(FORMAT + cryptedkey)
    collector = repo.TreeBuilder()
    collector.insert('0', keyfile, pygit2.enums.FileMode.BLOB)
    colid = collector.write()
    commit = secretcommit(colid, [], repo, key)
    repo.create_reference('refs/heads/key', commit, force=True)
    return key




class ClearRepo:
    'cleartext repository'
    def __init__(self, name):
        self.name = name
        self.repo = pygit2.Repository(self.name)


class CryptRepo:
    'encrypted repository'
    def __init__(self, clear, url):
        def init_remote(repo, name, url):
            'initialize remote for mirror setup'
            remote = repo.remotes.create(name, url, "+refs/*:refs/*")
            mirror_var = f"remote.{name.decode()}.mirror"
            repo.config[mirror_var] = True
            return remote

        self.clear = clear
        hashstr = hashlib.sha1(url.encode('utf-8')).hexdigest()
        self.name = os.path.join( self.clear.name, 'incrypt', hashstr)
        self.refprefix = f'refs/incrypt/{hashstr}/'
        sshdir = os.path.join(os.path.expanduser('~'), '.ssh')
        keypair = pygit2.Keypair('git', os.path.join(sshdir, 'id_rsa.pub'),
                                 os.path.join(sshdir, 'id_rsa'), '')
        self.callbacks = pygit2.RemoteCallbacks(credentials=keypair)
        if not os.path.isdir(self.name):
            self.repo = pygit2.clone_repository(
                url, self.name, bare=True, remote=init_remote,
                callbacks=self.callbacks)
        else:
            self.repo = pygit2.Repository(self.name)
        self.key = getkey(self.repo)
        self.showprogress = True

    def progressbar(self, progress, total, length=50):
        'print a progress bar'
        if not self.showprogress:
            return
        if not total:
            sys.stderr.write('\r' + ' ' * (length + 7) + '\r')
            sys.stderr.flush()
            return
        percent = progress / total
        pbar = 'â–ˆ' * int(percent * length) + '-' * (length - int(percent * length))
        sys.stderr.write(f'\r|{pbar}| {percent:.0%}')
        sys.stderr.flush()

    def createrefs(self, repo, refs, inits, cryptmap):
        'create all encrypted or decrypted references'
        for i, ref in enumerate(refs):
            if inits[i]:
                repo.create_reference(ref, cryptmap[inits[i].id], force=True)
            else:
                try:
                    repo.references.delete(ref)
                except KeyError:
                    pass


    def getrefs(self):
        'list all cleartext references'
        def decryptref():
            'decrypt references'
            def readrevmap():
                'read the mapping table'
                processed = {}
                try:
                    rawdata = decryptdata(self.repo.revparse_single(
                        'refs/heads/map').tree["0"].read_raw(), self.key)
                    for i in range(20, len(rawdata), 40):
                        clear = rawdata[i:i+20].hex()
                        if clear in self.clear.repo:
                            processed[rawdata[i+20:i+40].hex()] = clear
                except KeyError:
                    pass
                return processed

            def recursivefinddec():
                'recursively traverse and find all commits to decrypt'
                while status[0]:
                    oid, obj = status[0].popitem()
                    for p in obj.parents:
                        if p.id not in status[1]:
                            status[0][p.id] = p
                    status[1][oid] = obj


            def randomdecryption():
                'encrypt all objects in topological order'
                def decrypttree(tree):
                    'decrypt a tree representing a commit or tag'
                    commit = None
                    for obj in tree:
                        raw = decryptdata(obj.read_raw(), self.key)
                        tmp = self.clear.repo.odb.write(raw[20], raw[21:])
                        if raw[20] in (pygit2.enums.ObjectType.COMMIT,
                                       pygit2.enums.ObjectType.TAG):
                            commit = tmp
                    return commit

                total = len(status[1])
                while status[1]:
                    oid, obj = status[1].popitem()
                    status[2][oid] = status[3][oid] \
                        if oid in status[3] and status[3][oid] in self.clear.repo \
                        else decrypttree(obj.tree)
                    self.progressbar(len(status[2]), total)
                self.progressbar(0, 0)


            # [ found, ready, processed, cryptmap ]
            status = [{}, {}, {}, readrevmap()]

            inits = [self.repo.revparse_single(encryptrefname(r[0], self.key)) for r in refs]
            for init in inits:
                status[0][init.id] = init
            recursivefinddec()
            randomdecryption()
            self.createrefs(self.clear.repo, [r[1] for r in refs], inits, status[2])

        remote = self.repo.remotes['origin']
        remote.fetch(callbacks=self.callbacks)

        refs = [[r, self.refprefix + r if r else None] for r in
                        filter(lambda x: x is not None,
                               [decryptrefname(r, self.key) for r in
                                   self.repo.references])]
        decryptref()
        expected = [r[1] for r in refs]
        result = []
        # talk(f'{self.clear.repo.lookup_reference(
        #       f"{self.refprefix}refs/heads/master").target} HEAD')
        for r in self.clear.repo.references:
            if r.startswith(self.refprefix):
                if r in expected:
                    result.append([r[len(self.refprefix):],
                                   self.clear.repo.lookup_reference(r).target])
                else:
                    self.clear.repo.references.delete(r)
        return result

    def push(self, refs):
        'push refs'
        def encryptref():
            'encrypt references'
            def readmap():
                'read the mapping table'
                processed = {}
                try:
                    rawdata = decryptdata(self.repo.revparse_single(
                        'refs/heads/map').tree["0"].read_raw(), self.key)
                    for i in range(20, len(rawdata), 40):
                        crypt = rawdata[i+20:i+40].hex()
                        if crypt in self.repo:
                            processed[rawdata[i:i+20].hex()] = crypt
                except KeyError:
                    pass
                return processed


            def writemap():
                'write the mapping table'
                rawdata = b''
                for a, b in status[3].items():
                    rawdata += bytes.fromhex(a) + bytes.fromhex(b)
                mapfile = self.repo.create_blob(encryptdata(hashlib.sha1(rawdata).digest() +
                                           rawdata, self.key))
                collector = self.repo.TreeBuilder()
                collector.insert('0', mapfile, pygit2.enums.FileMode.BLOB)
                colid = collector.write()
                commit = secretcommit(colid, [], self.repo, self.key)
                self.repo.create_reference('refs/heads/map', commit, force=True)

            def iscomplete(obj):
                'check if processing is complete'
                if obj.type == pygit2.enums.ObjectType.COMMIT:
                    for p in obj.parents:
                        if p.id not in status[3]:
                            return False
                    return True
                if obj.type == pygit2.enums.ObjectType.TAG:
                    return obj.target in status[3]
                raise TypeError(f'Unexpected type {obj.type_str} in completeness check')


            def register(obj, child):
                'register new object'
                if obj.id not in children:
                    children[obj.id] = []
                if child:
                    children[obj.id].append(child)
                if all(obj.id not in d for d in status):
                    status[0][obj.id] = obj


            def recursivefind():
                'recursively traverse and find all commits to encrypt'
                while status[0]:
                    oid, obj = status[0].popitem()
                    if obj.type == pygit2.enums.ObjectType.COMMIT:
                        for p in obj.parents:
                            register(p, obj)
                    elif obj.type == pygit2.enums.ObjectType.TAG:
                        register(obj.get_object(), obj)
                    else:
                        raise TypeError(f'Unexpected type {obj.type_str} in git history')
                    if iscomplete(obj):
                        status[2][oid] = obj
                    else:
                        status[1][oid] = obj


            def topologicalencryption():
                'encrypt all objects in topological order'
                def cryptraw(clear, collector):
                    'encrypt a raw object'
                    cryptid = cryptcache[clear.id] if clear.id in cryptcache else \
                        self.repo.create_blob(encryptdata(
                            clear.id.raw + clear.type.to_bytes(1) + clear.read_raw(), self.key))
                    collector.insert(str(len(collector)), cryptid, pygit2.enums.FileMode.BLOB)
                    cryptcache[clear.id] = cryptid


                def encryptcommit(commit):
                    'encrypt a commit'
                    def encrypttree(tree):
                        'encrypt a tree'
                        for obj in tree:
                            if obj.type == pygit2.enums.ObjectType.TREE:
                                encrypttree(obj)
                            elif obj.type == pygit2.enums.ObjectType.BLOB:
                                cryptraw(obj, collector)
                        cryptraw(tree, collector)


                    collector = self.repo.TreeBuilder()
                    encrypttree(commit.tree)
                    cryptraw(commit, collector)
                    colid = collector.write()
                    cryptparents = [status[3][c] for c in commit.parent_ids]
                    status[3][str(commit.id)] = secretcommit(
                            colid, cryptparents, self.repo, self.key)


                def encrypttag(tag):
                    'encrypt a tag'
                    collector = self.repo.TreeBuilder()
                    cryptraw(tag, collector)
                    colid = collector.write()
                    status[3][str(tag.id)] = secretcommit(
                        colid, [status[3][tag.target]], self.repo, self.key)


                cryptcache = {}
                totals = [len(status[1]) + len(status[2]), len(status[3])]
                while status[2]:
                    oid, obj = status[2].popitem()
                    if obj.type == pygit2.enums.ObjectType.COMMIT:
                        encryptcommit(obj)
                    elif obj.type == pygit2.enums.ObjectType.TAG:
                        encrypttag(obj)
                    else:
                        raise TypeError(f'Unexpected type {obj.type_str} in git history')
                    for c in children[oid]:
                        if c.id not in status[1]:
                            continue
                        if iscomplete(c):
                            status[2][c.id] = status[1].pop(c.id)
                    self.progressbar(len(status[3]) - totals[1], totals[0])
                self.progressbar(0, 0)



            # [ found, pending, ready, processed ]
            status = [{}, {}, {}, readmap()]
            children = {}

            inits = [self.clear.repo.revparse_single(r[0]) if r[0] != ''
                             else None for r in refs]
            for init in inits:
                if init:
                    register(init, None)
            recursivefind()
            topologicalencryption()
            if len(status[1]):
                raise RuntimeError(
                    f'Not all data got processed, {status[1]} still pending')
            writemap()
            self.createrefs(self.repo, [encryptrefname(r[1], self.key) for r in
                                          refs], inits, status[3])


        encryptref()
        remote = self.repo.remotes['origin']
        refspecs = ['+refs/heads/map:refs/heads/map'] + [
                f'+{ref[1]}:{ref[1]}' if ref[0] else f':{ref[1]}' for ref in
                [[r[0], encryptrefname(r[1], self.key)] for r in refs]]
        sshdir = os.path.join(os.path.expanduser('~'), '.ssh')
        keypair = pygit2.Keypair('git', os.path.join(sshdir, 'id_rsa.pub'),
                                 os.path.join(sshdir, 'id_rsa'), '')
        callbacks = pygit2.RemoteCallbacks(credentials=keypair)
        remote.push(refspecs, callbacks=callbacks)



class RemoteHelper:
    'git remote helper interface'
    def __init__(self):
        self.verbosity = 1
        self.clear = ClearRepo(os.environ.get('GIT_DIR', 'UNSET'))
        self.crypt = CryptRepo(self.clear, sys.argv[2])

    def talk(self, message):
        'sends a response to git'
        sys.stdout.write(f'{message}\n')
        sys.stdout.flush()


    def log(self, level, message):
        'prints a log message'
        if level <= self.verbosity:
            sys.stderr.write(f'{message}\n')
            sys.stderr.flush()


    def loop(self):
        'communication loop'
        self.log(2, f'INCRYPT: arguments: {sys.argv}')
        self.log(2, f'INCRYPT: GIT_DIR: {self.clear.name}')
        while True:
            line = sys.stdin.readline().strip()
            if not line:
                break

            command = line.split()
            self.log(2, f'INCRYPT: invoked: {line}')
            if command[0] == 'capabilities':
                self.talk('fetch\npush\noption\n')
            elif command[0] == 'list':
                for r in self.crypt.getrefs():
                    self.talk(f'{r[1]} {r[0]}')
                self.talk('')
            elif command[0] == 'fetch':
                self.fetchcommand(line)
            elif command[0] == 'push':
                self.pushcommand(line)
            elif command[0] == 'option':
                if command[1] == 'progress':
                    self.crypt.showprogress = command[2] == 'true'
                    self.talk('ok')
                elif command[1] == 'verbosity':
                    self.verbosity = int(command[2])
                    self.talk('ok')
                elif command[1] == 'followtags':
                    self.talk('ok')
                else:
                    self.talk('unsupported')
            else:
                self.log(1, f'Unknown command: {line}')

    def fetchcommand(self, line):
        'parse fetch batch'
        while line:
            command = line.split()
            if command[0] == 'fetch':
                # We did that already in list.
                pass
            else:
                raise ValueError(f'Unexpected command in fetch batch: {line}')
            line = sys.stdin.readline().strip()
            self.log(2, f'INCRYPT:          {line}')
        self.talk('')

    def pushcommand(self, line):
        'parse push batch'
        refs = []
        while line:
            command = line.split()
            if command[0] == 'push':
                src, dst = command[1].split(':')
                if len(src) and src[0] == '+':
                    src = src[1:]
                    # force
                self.log(3, f'Pushing {src} to {dst}...')
                refs.append([src, dst])
            else:
                raise ValueError(f'Unexpected command in push batch: {line}')
            line = sys.stdin.readline().strip()
            self.log(2, f'INCRYPT:          {line}')
        self.crypt.push(refs)
        for r in refs:
            self.talk(f'ok {r[1]}')
        self.talk('')





cmd = sys.argv[0].rsplit('/', 1)[-1]

if cmd == 'git-remote-incrypt':
    RemoteHelper().loop()
    sys.exit(0)
if cmd == 'git-incrypt':
    sys.exit(0)

operation = sys.argv[1]

if operation[0:1] == 'l':
    listcryptrefs(sys.argv[2])
elif operation[0:1] == 'i':
    if len(sys.argv) > 3:
        initcrypt(sys.argv[2], sys.argv[3].split(','), data=sys.argv[4:])
    else:
        initcrypt(sys.argv[2], sys.argv[3].split(','))
else:
    raise ValueError(f'Unknown operation {operation}')
